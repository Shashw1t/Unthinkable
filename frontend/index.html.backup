<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Knowledge Base Search Engine</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .subtitle {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        @media (max-width: 968px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .card h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .upload-area {
            border: 2px dashed #667eea;
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 20px;
        }

        .upload-area:hover {
            border-color: #764ba2;
            background: #f8f9ff;
        }

        .upload-area.dragging {
            border-color: #764ba2;
            background: #f0f0ff;
        }

        #fileInput {
            display: none;
        }

        .file-list {
            margin-top: 20px;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #f5f5f5;
            border-radius: 6px;
            margin-bottom: 10px;
        }

        .file-item.success {
            background: #d4edda;
            border-left: 4px solid #28a745;
        }

        .file-item.error {
            background: #f8d7da;
            border-left: 4px solid #dc3545;
        }

        button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: transform 0.2s;
        }

        button:hover {
            transform: translateY(-2px);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .query-section {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        #queryInput {
            flex: 1;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 1em;
        }

        #queryInput:focus {
            outline: none;
            border-color: #667eea;
        }

        .answer-box {
            background: #f8f9ff;
            border-left: 4px solid #667eea;
            padding: 20px;
            border-radius: 6px;
            margin-top: 20px;
            display: none;
        }

        .answer-box.show {
            display: block;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .answer-text {
            color: #333;
            line-height: 1.6;
            margin-bottom: 15px;
            white-space: pre-wrap;
        }

        .sources {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
        }

        .sources h4 {
            color: #666;
            margin-bottom: 10px;
            font-size: 0.9em;
            text-transform: uppercase;
        }

        .source-item {
            background: white;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 10px;
            font-size: 0.9em;
        }

        .source-header {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 5px;
        }

        .source-text {
            color: #666;
            font-size: 0.85em;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .stats {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            display: flex;
            justify-content: space-around;
            text-align: center;
        }

        .stat-item {
            flex: 1;
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            color: #666;
            margin-top: 5px;
        }

        .loader {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 6px;
            margin-top: 15px;
            border-left: 4px solid #dc3545;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 6px;
            margin-top: 15px;
            border-left: 4px solid #28a745;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üîç Knowledge Base Search Engine</h1>
            <p class="subtitle">Upload documents and ask questions using AI-powered RAG</p>
        </header>

        <div class="main-content">
            <!-- Upload Section -->
            <div class="card">
                <h2>üìÑ Upload Documents</h2>
                <div class="upload-area" id="uploadArea">
                    <p style="font-size: 2em; margin-bottom: 10px;">üìÅ</p>
                    <p>Click to select files or drag & drop</p>
                    <p style="font-size: 0.9em; color: #666; margin-top: 10px;">Supports PDF, TXT, DOCX (Max 10MB)</p>
                </div>
                <input type="file" id="fileInput" multiple accept=".pdf,.txt,.docx">
                <button id="uploadBtn" disabled>Upload Documents</button>
                <div class="file-list" id="fileList"></div>
            </div>

            <!-- Query Section -->
            <div class="card">
                <h2>üí¨ Ask Questions</h2>
                <div class="query-section">
                    <input type="text" id="queryInput" placeholder="Ask a question about your documents...">
                    <button id="queryBtn">Search</button>
                </div>
                <div class="answer-box" id="answerBox">
                    <h3 style="color: #667eea; margin-bottom: 15px;">Answer:</h3>
                    <div class="answer-text" id="answerText"></div>
                    <div class="sources" id="sourcesSection" style="display: none;">
                        <h4>üìö Sources:</h4>
                        <div id="sourcesList"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Section -->
        <div class="stats" id="stats">
            <div class="stat-item">
                <div class="stat-value" id="docCount">0</div>
                <div class="stat-label">Documents Indexed</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="chunkCount">0</div>
                <div class="stat-label">Total Chunks</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="queryCount">0</div>
                <div class="stat-label">Queries Made</div>
            </div>
        </div>
    </div>

    <script>
        let selectedFiles = [];
        let queryCounter = 0;
        let documentCounter = 0;

        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const fileList = document.getElementById('fileList');
        const queryInput = document.getElementById('queryInput');
        const queryBtn = document.getElementById('queryBtn');
        const answerBox = document.getElementById('answerBox');
        const answerText = document.getElementById('answerText');
        const sourcesSection = document.getElementById('sourcesSection');
        const sourcesList = document.getElementById('sourcesList');

        // Upload area click
        uploadArea.addEventListener('click', () => fileInput.click());

        // Drag and drop
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragging');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragging');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragging');
            handleFiles(e.dataTransfer.files);
        });

        // File selection
        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function handleFiles(files) {
            selectedFiles = Array.from(files);
            displayFiles();
            uploadBtn.disabled = selectedFiles.length === 0;
        }

        function displayFiles() {
            fileList.innerHTML = '';
            selectedFiles.forEach((file, index) => {
                const div = document.createElement('div');
                div.className = 'file-item';
                div.innerHTML = `
                    <span>${file.name} (${(file.size / 1024).toFixed(2)} KB)</span>
                    <button onclick="removeFile(${index})" style="padding: 5px 10px; font-size: 0.8em;">Remove</button>
                `;
                fileList.appendChild(div);
            });
        }

        function removeFile(index) {
            selectedFiles.splice(index, 1);
            displayFiles();
            uploadBtn.disabled = selectedFiles.length === 0;
        }

        // Upload documents
        uploadBtn.addEventListener('click', async () => {
            const formData = new FormData();
            selectedFiles.forEach(file => formData.append('files', file));

            uploadBtn.disabled = true;
            uploadBtn.innerHTML = 'Uploading... <div class="loader"></div>';

            try {
                const response = await fetch('http://localhost:8000/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                fileList.innerHTML = '';
                result.results.forEach(item => {
                    const div = document.createElement('div');
                    div.className = `file-item ${item.success ? 'success' : 'error'}`;
                    div.innerHTML = `
                        <span>${item.filename}</span>
                        <span>${item.success ? '‚úì ' + item.message : '‚úó ' + item.error}</span>
                    `;
                    fileList.appendChild(div);
                    if (item.success) documentCounter++;
                });

                selectedFiles = [];
                fileInput.value = '';
                await updateStats();
            } catch (error) {
                alert('Upload failed: ' + error.message);
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = 'Upload Documents';
            }
        });

        // Query
        queryBtn.addEventListener('click', () => performQuery());
        queryInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') performQuery();
        });

        async function performQuery() {
            const query = queryInput.value.trim();
            if (!query) return;

            queryBtn.disabled = true;
            queryBtn.innerHTML = 'Searching... <div class="loader"></div>';
            answerBox.classList.remove('show');

            try {
                const response = await fetch('http://localhost:8000/query', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });

                const result = await response.json();
                
                if (response.ok) {
                    answerText.textContent = result.answer;
                    
                    if (result.sources && result.sources.length > 0) {
                        sourcesSection.style.display = 'block';
                        sourcesList.innerHTML = '';
                        result.sources.forEach((source, idx) => {
                            const div = document.createElement('div');
                            div.className = 'source-item';
                            div.innerHTML = `
                                <div class="source-header">Source ${idx + 1}: ${source.metadata.filename}</div>
                                <div class="source-text">${source.text}</div>
                            `;
                            sourcesList.appendChild(div);
                        });
                    } else {
                        sourcesSection.style.display = 'none';
                    }
                    
                    answerBox.classList.add('show');
                    queryCounter++;
                    updateStats();
                } else {
                    answerText.innerHTML = `<div class="error-message">${result.detail || 'Query failed'}</div>`;
                    answerBox.classList.add('show');
                    sourcesSection.style.display = 'none';
                }
            } catch (error) {
                answerText.innerHTML = `<div class="error-message">Error: ${error.message}</div>`;
                answerBox.classList.add('show');
                sourcesSection.style.display = 'none';
            } finally {
                queryBtn.disabled = false;
                queryBtn.textContent = 'Search';
            }
        }

        // Update stats
        async function updateStats() {
            try {
                const response = await fetch('http://localhost:8000/stats');
                const stats = await response.json();
                document.getElementById('chunkCount').textContent = stats.total_chunks || 0;
                document.getElementById('docCount').textContent = documentCounter;
                document.getElementById('queryCount').textContent = queryCounter;
            } catch (error) {
                console.error('Failed to update stats:', error);
            }
        }

        // Initial stats load
        updateStats();
    </script>
</body>
</html>
